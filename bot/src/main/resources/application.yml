app:
  telegram-token: ${TG_TOKEN}

  useQueue: ${USE_KAFKA}

  controller:
    updates:
      limit: 50
      interval: 1m

  async:
    core-pool-size: 4
    max-pool-size: 16
    queue-capacity: 256

  kafka-updates-topic:
    name: updatesTopic
    partitions: 3
    replicas: 3
  kafka-updates-dlq-topic:
    name: updatesTopic_dlq
    partitions: 1
    replicas: 1

scrapper:
  url: ${SCRAPPER_URL}
  connection-timeout: 10s
  retry:
    max-attempts: 3
    strategy: exponential
    interval: 3s
    codes:
      - 429

spring:
  application:
    name: bot
  jackson:
    time-zone: UTC
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: link-updates
      value-deserializer: edu.java.bot.service.LinkUpdateRequestAvroDeserializer
      auto-offset-reset: latest
      properties:
        max:
          poll:
            interval:
              ms: 300000

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

management:
  server:
    port: 8081

  endpoints:
    web:
      exposure:
        include:
          - health
          - info
          - prometheus
      base-path: /
      path-mapping:
        prometheus: /metrics

  metrics:
    tags:
      application: ${spring.application.name}
